#!/usr/bin/env python3
import os
import re
import sys

class Method:
	def __init__(self, name):
		result = re.match("# \\(([0-9]+)\\) ([A-Za-z0-9_]+)", name)
		self.id = int(result[1])
		self.name = result[2]
		self.request = []
		self.response = []

def extract_name(link):
	return re.match("\\[([A-Za-z0-9 _]+)\\]\\(([A-Za-z0-9#-_]+)\\)", link)[1]

def lua_build_proto(header, cmds, method_infos):
	result = re.match("([A-Za-z0-9 ]+) \\(([0-9A-Fa-fx?]+)\\)", header)
	if result[2] == '0x??':
		return ""

	cmd_list = ""
	for c in cmds:
		if c[0].startswith("0x"):
			cmd_id = int(c[0], 16)
		else:
			cmd_id = int(c[0])
		name = c[1]
		if name.startswith("["):
			name = extract_name(name)

		req = "nil"
		resp = "nil"
		"""if cmd_id in method_infos:
			meth_info = method_infos[cmd_id]
			print(meth_info.request, meth_info.response)

			req = meth_info.request
			resp = meth_info.response
"""
		cmd_list += """[{}] = {{
				["name"] = "{}",
				["request"] = {},
				["response"] = {}
			}},
			""".format(cmd_id, name, req, resp)

	return """[{}] =
	{{
		["name"] = "{}",
		["methods"] = {{
{}
		}}
	}},""".format(result[2], result[1], cmd_list)

if not os.path.exists("NintendoClients.wiki"):
	print("Please run 'git clone https://github.com/Kinnay/NintendoClients.wiki.git'")
	exit()

if len(sys.argv) == 1:
	print("Usage: {} [output file]".format(sys.argv[0]))
	exit()

out_file = open(sys.argv[1], 'w')
out_file.write("""-- This file is autogenerated
-- Pls dont
local info = {\n""")

a = os.listdir("NintendoClients.wiki")
for name in a:
	if name == 'RMC-Protocol.md' or name == 'PRUDP-Protocol.md':
		continue
	if re.search("Protocol(?:-[^.]+)?.md", name):
		with open("NintendoClients.wiki/"+name) as f:
			header = f.readline().strip()
			if header.startswith("## "):
				header = header[3:]
			if header.startswith("[["): # parse link
				end = header.find("]] > ")
				if end == None:
					print("?", name)
					break
				header = header[end+5:]
				#print(header)

				# states
				CmdList = 0
				SearchingForMethod = 1
				MethodRequest = 2
				MethodResponse = 3

				cmd_list = []
				method_infos = None
				current_method = None

				state = CmdList
				table = False
				cmd = False

				skip_table = False

				for l in f.readlines():

					l=l.strip()
					#print(l)
					if not table and l.startswith('|'):
						table = True
						continue # Skip the table header..

					if table:
						if l == '':
							if not skip_table: # Don't do state transitions if we skip a table!
								if state == CmdList:
									state = SearchingForMethod
								elif state == MethodRequest:
									state = MethodResponse
								elif state == MethodResponse:
									state = SearchingForMethod
									method_infos[current_method.id] = current_method
							table = False
						else:
							row = list(map(lambda a: a.strip(), l[1:-1].split('|')))
							if set(row) == set(['---']):
								continue

							if skip_table:
								continue

							if state == 0: # the cmd list is the first table
								cmd_list.append(row)
								method_infos = {}
							elif state == MethodRequest:
								current_method.request.append(row)
							elif state == MethodResponse:
								current_method.response.append(row)
					else:
						if l.startswith("# "):
							if state == SearchingForMethod:
								if l == '# Types': # lol
									continue
								current_method = Method(l)
								state = MethodRequest
							elif state == MethodResponse:
								# Maybe the method before is just missing info. That's fine.
								method_infos[current_method.id] = current_method

								current_method = Method(l)
								state = MethodRequest

						elif l.startswith("##"):
							if (state == MethodRequest and l != '## Request') or (state == MethodResponse and l != '## Response'):
								#print("Odd!", state, l)
								#print((state == MethodRequest and l != '## Request'), (state == MethodResponse and l != '## Response'))
								skip_table = True
							else:
								#print("Got correct header, stop skipping!!")
								skip_table = False
						elif l.startswith('This method does not take any request data') or l.startswith('This method does not take any parameters'):
							state = MethodResponse
						elif l.startswith('This method does not return anything') or l.startswith("This method doesn't return anything"):
							state = SearchingForMethod
							method_infos[current_method.id] = current_method
						elif l.startswith("This method takes no parameters and doesn't return anything."):
							state = SearchingForMethod
							method_infos[current_method.id] = current_method
				if table:
					table = False

				out_file.write(lua_build_proto(header, cmd_list, method_infos)+"\n")

out_file.write("}\nreturn info")
out_file.close()